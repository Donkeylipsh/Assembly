Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/11/18 19:34:41
Program3     (template.asm				     Page 1 - 1


				TITLE Program3     (template.asm)

				; Author: Colin Van Overschelde
				; OSU E-mail: vanoverc@oregonstate.edu
				; Course: CS 271
				; Project ID: Programming Assignment #3
				; Due Date: 2/11/2018
				; Description: Demonstrates Implementing data validation, an accumulator, integer arithmetic, 
				;			   defining variables (integer and string), using library procedures for I/O
				;			   and implementing control structures (decision, loop, procedure)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
 =-00000001				UPPER_LIMIT = -1
 =-00000064				LOWER_LIMIT = -100

 00000000			.data

				; (insert variable definitions here)
					; Input strings
 00000000 57 65 6C 63 6F		welcome			BYTE	"Welcome to the Integer Accumulator by Colin Van Overschelde", 0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   49 6E 74 65 67
	   65 72 20 41 63
	   63 75 6D 75 6C
	   61 74 6F 72 20
	   62 79 20 43 6F
	   6C 69 6E 20 56
	   61 6E 20 4F 76
	   65 72 73 63 68
	   65 6C 64 65 00
 0000003C 57 68 61 74 20		getName			BYTE	"What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 00000050 48 65 6C 6C 6F		greeting		BYTE	"Hello, ", 0
	   2C 20 00
 00000058 50 6C 65 61 73		instruction1	BYTE	"Please enter numbers in [-100, -1].", 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 31 30 30 2C
	   20 2D 31 5D 2E
	   00
 0000007C 45 6E 74 65 72		instruction2	BYTE	"Enter a non-negative number when you are finished to see results.", 0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 61 72 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   74 6F 20 73 65
	   65 20 72 65 73
	   75 6C 74 73 2E
	   00
 000000BE 45 6E 74 65 72		inputPrompt		BYTE	"Enter number: ", 0
	   20 6E 75 6D 62
	   65 72 3A 20 00

					; Data variables
 000000CD  00000019 [			userName		BYTE	25 DUP(0)
	    00
	   ]
 000000E6 0000				someNum			SWORD	?
 000000E8 0000				numCount		WORD	0
 000000EA 0000				total			SWORD	0
 000000EC 0000				average			SWORD	0
 000000EE 0000				remainder		WORD	0
 000000F0 0000				countAverage	WORD	0

					; Output strings
 000000F2 59 6F 75 20 65		displayCount1	BYTE	"You entered ", 0
	   6E 74 65 72 65
	   64 20 00
 000000FF 20 76 61 6C 69		displayCount2	BYTE	" valid numbers.", 0
	   64 20 6E 75 6D
	   62 65 72 73 2E
	   00
 0000010F 54 68 65 20 73		displaySum		BYTE	"The sum of your valid numbers is ", 0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 73 20
	   69 73 20 00
 00000131 54 68 65 20 72		displayAverage	BYTE	"The rounded average is ", 0
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 20 00
 00000149 54 68 61 6E 6B		partingMessage	BYTE	"Thank you for playing Integer Accumulator!  It's been a pleasure to meet you, ", 0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 49 6E 74
	   65 67 65 72 20
	   41 63 63 75 6D
	   75 6C 61 74 6F
	   72 21 20 20 49
	   74 27 73 20 62
	   65 65 6E 20 61
	   20 70 6C 65 61
	   73 75 72 65 20
	   74 6F 20 6D 65
	   65 74 20 79 6F
	   75 2C 20 00
 00000198 4E 6F 20 6E 65		noInput			BYTE	"No negative numbers entered, skipping average claculation.", 0
	   67 61 74 69 76
	   65 20 6E 75 6D
	   62 65 72 73 20
	   65 6E 74 65 72
	   65 64 2C 20 73
	   6B 69 70 70 69
	   6E 67 20 61 76
	   65 72 61 67 65
	   20 63 6C 61 63
	   75 6C 61 74 69
	   6F 6E 2E 00

 00000000			.code
 00000000			main PROC

					; (insert executable instructions here)
					;	Display Program Info
 00000000  E8 0000002F			CALL	displayProgInfo

					; Greet User
 00000005  E8 00000040			CALL	greetUser

					; Display Instruction
 0000000A  E8 00000074			CALL	displayInstructions

					; Get input numbers
 0000000F  E8 00000099			CALL	getInput

					; Check if any input was entered
 00000014  66| A1			MOV		AX, numCount
	   000000E8 R
 0000001A  66| BB 0000			MOV		BX, 0
 0000001E  66| 3B C3			CMP		AX, BX
 00000021  74 05			JE		SkipCalculations	; If not, skip calculations

					; Calculate the average of the entered numbers
 00000023  E8 000000D4			CALL	calcAverage

 00000028				SkipCalculations:
					; Display Output
 00000028  E8 0000011F			CALL	displayOutput

					exit	; exit to operating system
 0000002D  6A 00	   *	    push   +000000000h
 0000002F  E8 00000000 E   *	    call   ExitProcess
 00000034			main ENDP

				; (insert additional procedures here)

				; Procedure: displayProgInfo
				; Description: Display the introduction strings for this program
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 00000034			displayProgInfo	PROC
					; Prepare registers
 00000034  55				PUSH	EBP
 00000035  8B EC			MOV		EBP, ESP
 00000037  60				PUSHAD

					; Display the welcome string
 00000038  BA 00000000 R		MOV		EDX, OFFSET welcome
 0000003D  E8 00000000 E		CALL	WriteString
 00000042  E8 00000000 E		CALL	CrLf

					; Restore registers
 00000047  61				POPAD
 00000048  5D				POP		EBP

 00000049  C3				RET
 0000004A			displayProgInfo	ENDP

				; Procedure: greetUser
				; Description: Prompts the user for their name and then greets them
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 0000004A			greetUser PROC
					; Prepare registers
 0000004A  55				PUSH	EBP
 0000004B  8B EC			MOV		EBP, ESP
 0000004D  60				PUSHAD

					; Prompt user for their name
 0000004E  BA 0000003C R		MOV		EDX, OFFSET getName
 00000053  E8 00000000 E		CALL	WriteString

					; Get userName from input
 00000058  BA 000000CD R		MOV		EDX, OFFSET userName
 0000005D  B9 00000019			MOV		ECX, SIZEOF	userName
 00000062  E8 00000000 E		CALL	ReadString

					; Display greeting string
 00000067  BA 00000050 R		MOV		EDX, OFFSET greeting
 0000006C  E8 00000000 E		CALL	WriteString
					; Display userName
 00000071  BA 000000CD R		MOV		EDX, OFFSET userName
 00000076  E8 00000000 E		CALL	WriteString
 0000007B  E8 00000000 E		CALL	CrLf

					; Restore registers
 00000080  61				POPAD
 00000081  5D				POP		EBP

 00000082  C3				RET
 00000083			greetUser ENDP

				; Procedure: displayInstructions
				; Description: Displays the program instruction strings
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 00000083			displayInstructions PROC
					; Prepare registers
 00000083  55				PUSH	EBP
 00000084  8B EC			MOV		EBP, ESP
 00000086  60				PUSHAD

					; Display the program instructions
 00000087  E8 00000000 E		CALL	CrLf
 0000008C  BA 00000058 R		MOV		EDX, OFFSET instruction1
 00000091  E8 00000000 E		CALL	WriteString
 00000096  E8 00000000 E		CALL	CrLf
 0000009B  BA 0000007C R		MOV		EDX, OFFSET instruction2
 000000A0  E8 00000000 E		CALL	WriteString
 000000A5  E8 00000000 E		Call	CrLf
					
					; Restore registers
 000000AA  61				POPAD
 000000AB  5D				POP		EBP

 000000AC  C3				RET
 000000AD			displayInstructions ENDP

				; Procedure:getInput
				; Description: Accepts input values and adds them to total
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 000000AD			getInput PROC
					; Prepare registers
 000000AD  55				PUSH	EBP
 000000AE  8B EC			MOV		EBP, ESP
 000000B0  60				PUSHAD

					; Enter loop to accept input
 000000B1				InputLoop:
						; Prompt user for input
 000000B1  BA 000000BE R			MOV		EDX, OFFSET inputPrompt
 000000B6  E8 00000000 E			CALL	WriteString

						; Read the input
 000000BB  E8 00000000 E			CALL	ReadInt
 000000C0  66| A3				MOV		someNum, AX
	   000000E6 R

						; Validate that input is betwee [-100, -1] inclusive
 000000C6  66| BB FFFF				MOV		BX, UPPER_LIMIT
 000000CA  66| 3B C3				CMP		AX, BX
 000000CD  7F 2A				JG		StopInput
 000000CF  66| BB FF9C				MOV		BX, LOWER_LIMIT
 000000D3  66| 3B C3				CMP		AX, BX
 000000D6  7D 07				JGE		AddToSum
 000000D8  E8 FFFFFFA6				CALL	displayInstructions
 000000DD  EB D2				JMP		InputLoop

 000000DF				AddToSum:
						; Add the validated input value to total
 000000DF  66| FF 05				INC		numCount
	   000000E8 R
 000000E6  66| 8B 1D				MOV		BX, total
	   000000EA R
 000000ED  66| 03 D8				ADD		BX, AX
 000000F0  66| 89 1D				MOV		total, BX
	   000000EA R
 000000F7  EB B8				JMP		InputLoop
						
 000000F9				StopInput:
						; Does nothing, just resumes the procedure

					; Restore registers
 000000F9  61				POPAD
 000000FA  5D				POP		EBP

 000000FB  C3				ret
 000000FC			getInput ENDP

				; Procedure: calcAverage
				; Description: Calculates the average value of the input numbers
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 000000FC			calcAverage PROC
					; Prepare registers
 000000FC  55				PUSH	EBP
 000000FD  8B EC			MOV		EBP, ESP
 000000FF  60				PUSHAD

					; Calculate average
 00000100  66| A1			MOV		AX, total
	   000000EA R
 00000106  66| 99			CWD
 00000108  66| 8B 1D			MOV	 	BX, numCount
	   000000E8 R
 0000010F  66| F7 FB			IDIV	BX
 00000112  66| A3			MOV		average, AX
	   000000EC R
 00000118  66| 89 15			MOV		remainder, DX
	   000000EE R

					; Round to nearest int
					; Calculate "0.5" value of remainder
 0000011F  66| A1			MOV		AX, numCount
	   000000E8 R
 00000125  66| 48			DEC		AX
 00000127  66| 99			CWD
 00000129  66| BB FFFE			MOV		BX, -2
 0000012D  66| F7 FB			IDIV	BX
 00000130  66| A3			MOV		countAverage, AX
	   000000F0 R
 00000136  66| 8B 1D			MOV		BX, remainder
	   000000EE R
					; Compare "0.5" value of remainder to remainder
 0000013D  66| 3B C3			CMP		AX, BX
 00000140  7E 07			JLE		ResumeAverage	; If remainder is less than "0.5" value, skip rounding
 00000142  66| FF 0D			DEC		average			; Round the average to the next integer
	   000000EC R

 00000149				ResumeAverage:
					; Restore registers
 00000149  61				POPAD
 0000014A  5D				POP		EBP

 0000014B  C3				ret
 0000014C			calcAverage ENDP

				; Procedure: displayOutput
				; Description: Displays the output strings for the program
				; Receives: n/a
				; Returns: n/a
				; Pre-Conditions: n/a
				; Registers Changed: n/a
 0000014C			displayOutput PROC
					; Prepare registers
 0000014C  55				PUSH		EBP
 0000014D  8B EC			MOV			EBP, ESP
 0000014F  60				PUSHAD

					; Check if the user entered at least 1 valid number
 00000150  0F B7 05			MOVZX		EAX, numCount
	   000000E8 R
 00000157  BB 00000000			MOV			EBX, 0
 0000015C  3B C3			CMP			EAX, EBX
 0000015E  74 56			JE			NoInputEntered		; If not numbers input, skip all calculated output

					; Display the count of valid numbers entered
 00000160  BA 000000F2 R		MOV			EDX, OFFSET displayCount1
 00000165  E8 00000000 E		CALL		WriteString
 0000016A  E8 00000000 E		CALL		WriteDec
 0000016F  BA 000000FF R		MOV			EDX, OFFSET displayCount2
 00000174  E8 00000000 E		CALL		WriteString
 00000179  E8 00000000 E		CALL		CrLf

					; Display the sum of the valid numbers entered
 0000017E  BA 0000010F R		MOV			EDX, OFFSET displaySum
 00000183  E8 00000000 E		CALL		WriteString
 00000188  0F BF 05			MOVSX		EAX, total
	   000000EA R
 0000018F  E8 00000000 E		CALL		WriteInt
 00000194  E8 00000000 E		CALL		CrLf

					; Display the average of the valid numbers entered
 00000199  BA 00000131 R		MOV			EDX, OFFSET displayAverage
 0000019E  E8 00000000 E		CALL		WriteString
 000001A3  0F BF 05			MOVSX		EAX, average
	   000000EC R
 000001AA  E8 00000000 E		CALL		WriteInt
 000001AF  E8 00000000 E		CALL		CrLf
 000001B4  EB 0F			JMP			ResumeOutput

 000001B6				NoInputEntered:
						; Display no valid numbers entered
 000001B6  BA 00000198 R			MOV		EDX, OFFSET noInput
 000001BB  E8 00000000 E			CALL	WriteString
 000001C0  E8 00000000 E			CALL	CrLf
					
 000001C5				ResumeOutput:
					; Display parting message to the user
 000001C5  BA 00000149 R		MOV			EDX, OFFSET	partingMessage
 000001CA  E8 00000000 E		CALL		WriteString
 000001CF  BA 000000CD R		MOV			EDX, OFFSET userName
 000001D4  E8 00000000 E		CALL		WriteString
 000001D9  E8 00000000 E		CALL		CrLf

					; Restore registers
 000001DE  61				POPAD
 000001DF  5D				POP			EBP

 000001E0  C3				ret
 000001E1			displayOutput ENDP

				END main
Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/11/18 19:34:41
Program3     (template.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001E1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcAverage  . . . . . . . . . .	P Near	 000000FC _TEXT	Length= 00000050 Public STDCALL
  ResumeAverage  . . . . . . . .	L Near	 00000149 _TEXT	
displayInstructions  . . . . . .	P Near	 00000083 _TEXT	Length= 0000002A Public STDCALL
displayOutput  . . . . . . . . .	P Near	 0000014C _TEXT	Length= 00000095 Public STDCALL
  NoInputEntered . . . . . . . .	L Near	 000001B6 _TEXT	
  ResumeOutput . . . . . . . . .	L Near	 000001C5 _TEXT	
displayProgInfo  . . . . . . . .	P Near	 00000034 _TEXT	Length= 00000016 Public STDCALL
getInput . . . . . . . . . . . .	P Near	 000000AD _TEXT	Length= 0000004F Public STDCALL
  InputLoop  . . . . . . . . . .	L Near	 000000B1 _TEXT	
  AddToSum . . . . . . . . . . .	L Near	 000000DF _TEXT	
  StopInput  . . . . . . . . . .	L Near	 000000F9 _TEXT	
greetUser  . . . . . . . . . . .	P Near	 0000004A _TEXT	Length= 00000039 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000034 Public STDCALL
  SkipCalculations . . . . . . .	L Near	 00000028 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_LIMIT  . . . . . . . . . .	Number	 -00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 -00000001h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	Word	 000000EC _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countAverage . . . . . . . . . .	Word	 000000F0 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayAverage . . . . . . . . .	Byte	 00000131 _DATA	
displayCount1  . . . . . . . . .	Byte	 000000F2 _DATA	
displayCount2  . . . . . . . . .	Byte	 000000FF _DATA	
displaySum . . . . . . . . . . .	Byte	 0000010F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getName  . . . . . . . . . . . .	Byte	 0000003C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000050 _DATA	
inputPrompt  . . . . . . . . . .	Byte	 000000BE _DATA	
instruction1 . . . . . . . . . .	Byte	 00000058 _DATA	
instruction2 . . . . . . . . . .	Byte	 0000007C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
noInput  . . . . . . . . . . . .	Byte	 00000198 _DATA	
numCount . . . . . . . . . . . .	Word	 000000E8 _DATA	
partingMessage . . . . . . . . .	Byte	 00000149 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	Word	 000000EE _DATA	
someNum  . . . . . . . . . . . .	Word	 000000E6 _DATA	
total  . . . . . . . . . . . . .	Word	 000000EA _DATA	
userName . . . . . . . . . . . .	Byte	 000000CD _DATA	
welcome  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
